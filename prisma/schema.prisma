// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  username    String        @unique
  password    String
  nickname    String?
  phone       String
  lineId      String?
  role        Role          @default(USER)
  Order       Order[]
  Address     Address[]
  Measurement Measurement[]

  @@map("User")
}

model Address {
  id          Int     @id @default(autoincrement())
  houseNum    String
  village     String?
  road        String
  soi         String?
  district    String
  subdistrict String?
  province    String
  postal      String
  detail      String?
  userId      Int     @unique @map("user_id")
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Address")
}

enum WorkStatus {
  WAITING
  WORKING
  DONE
}

model Order {
  id          Int        @id @default(autoincrement())
  appointment DateTime
  status      WorkStatus @default(WAITING)
  details     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  userId      Int        @map("user_id")
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   Int        @map("product_id")
  Product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("Order")
}

model Measurement {
  id               Int      @id @default(autoincrement())
  shoulder         String?
  bust             String?
  frontTorsoWide   String?  @map("front_torso_wide")
  backTorsoWide    String?  @map("back_torso_wide")
  nipWideApart     String?  @map("nip_wide_apart")
  waist            String?
  shirtLength      String?  @map("shirt_length")
  armCircumference String?  @map("arm_circumference")
  armLength        String?  @map("arm_length")
  wrist            String?
  hip              String?
  highHip          String?  @map("high_hip")
  lowHip           String?  @map("low_hip")
  crotch           String?
  upperLegLength   String?  @map("upper_leg_length")
  lowerLegLength   String?  @map("lower_leg_length")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  userId           Int      @unique @map("user_id")
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Measurement")
}

enum JobType {
  PRODUCT
  SERVICE
}

model Product {
  id           Int     @id @default(autoincrement())
  name         String
  description  String?
  type         JobType @default(PRODUCT)
  price        String
  productImage String
  order        Order[]

  @@map("Product")
}